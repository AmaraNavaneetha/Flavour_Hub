@model List<restapp.Models.FoodItem>

<style>
    /* 1. CSS to visually mark unavailable items */
    .unavailable-item {
        opacity: 0.6; /* Dim the card visually */
        pointer-events: none; /* Blocks ALL clicks on the card itself */
        cursor: not-allowed; /* Show a "no entry" cursor */
        filter: grayscale(80%); /* Makes the image/card look drab/unavailable */
    }

        /* 🛑 CRITICAL FIX: Force block on all elements inside the unavailable card */
        .unavailable-item * {
            pointer-events: none !important;
        }

    /* We only want a pointer cursor when the item is actually available */
    .food-item-card:not(.unavailable-item) {
        cursor: pointer;
        position: relative; /* Base for tooltip positioning */
        overflow: hidden;
    }

    /* Tooltip Styles for Popover Effect */
    .full-description-tooltip {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 10;
        display: none; /* Initially hidden */
        pointer-events: auto; /* Re-enable click inside the tooltip panel itself */
        background-color: rgba(255, 255, 255, 0.95); /* Semi-transparent white background */
        backdrop-filter: blur(2px);
        overflow-y: auto;
    }

    .food-item-card.tooltip-active .full-description-tooltip {
        display: block; /* Show when active */
    }

    .unavailable-label {
        color: #dc3545;
        font-weight: bold;
        text-transform: uppercase;
        font-size: 0.9rem;
    }
</style>

<div class="mb-3">
    <a href="@Url.Action("Menu", "Home")" class="btn btn-light border">
        ← Back to Menu
    </a>
</div>

@if (Model != null && Model.Count > 0)
{
    <div class="row row-cols-1 row-cols-md-3 g-4">

        @foreach (var item in Model)
        {
            // C# LOGIC: Check availability and set classes/variables
            bool isAvailable = item.IsAvailable;
            string cardClass = isAvailable ? "shadow-sm" : "unavailable-item";
            int currentQuantity = 0; // Placeholder for cart quantity

            <div class="col">
                <div class="card h-100 @cardClass rounded-4 food-item-card"
                     data-full-desc="@item.ItemDescription"
                     data-item-name="@item.ItemName"
                     data-item-image="@Url.Content(item.ItemImagePath)">

                    <img src="@Url.Content(item.ItemImagePath)" class="card-img-top img-fluid rounded-top-4 card-image-clickable" alt="@item.ItemName" style="height:200px; object-fit:cover;" />

                    <div class="card-body d-flex flex-column justify-content-between">
                        <div>
                            <div class="d-flex justify-content-between align-items-center mb-2">

                                @* Veg/Non-Veg Indicator *@
                                @if (item.itemType?.ItemTypeName == "Veg")
                                {
                                    <span class="d-inline-flex align-items-center gap-2">
                                        <span class="d-inline-block border border-success rounded" style="width: 20px; height: 20px; line-height: 18px; text-align: center;">
                                            <span class="bg-success rounded-circle d-inline-block" style="width: 10px; height: 10px;"></span>
                                        </span>
                                    </span>
                                }
                                else
                                {
                                    <span class="d-inline-flex align-items-center gap-2">
                                        <span class="d-inline-block border border-danger rounded" style="width: 20px; height: 20px; line-height: 18px; text-align: center;">
                                            <span class="text-danger fw-bold" style="font-size: 1.4rem;">▵</span>
                                        </span>
                                    </span>
                                }

                                @* Rating Display *@
                                @if (!string.IsNullOrWhiteSpace(item.Rating) && item.RatingCount > 0)
                                {
                                    var ratingValue = Convert.ToDouble(item.Rating);
                                    var starColor = ratingValue > 6 ? "#d4ac0d" : "#ffc107";
                                    <span class="d-inline-flex align-items-center gap-1">
                                        <i class="bi bi-star-fill" style="color:@starColor;">★</i> @item.Rating
                                        <small class="text-muted">(@item.RatingCount ratings)</small>
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted">No ratings yet</span>
                                }
                            </div>

                            <h5 class="card-title">@item.ItemName</h5>

                            @* Display availability status *@
                            @if (!isAvailable)
                            {
                                <p class="unavailable-label mb-2">Unavailable</p>
                            }

                            <p class="card-text short-description-text">
                                @(item.ItemDescription.Length > 30 ? item.ItemDescription.Substring(0, 30) + "..." : item.ItemDescription)
                            </p>

                            <p class="card-text mb-2">
                                <strong>Price:</strong><br />
                                <span class="text-muted text-decoration-line-through">₹@item.ActualPrice</span><br />
                                <span class="text-success">@item.DiscountPer% off</span>
                            </p>

                            @* Selling Price and Add Button Side by Side *@
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="fw-bold fs-5 mb-0">₹@item.SellingPrice</span>

                                <div class="quantity-control-container">

                                    @if (!isAvailable)
                                    {
                                        // Item is deactivated/unavailable by Admin
                                        <button class="btn btn-danger btn-sm" disabled>Out of Stock</button>
                                    }
                                    else if (currentQuantity == 0)
                                    {
                                        // --- A. Simple ADD Button (Visible when Q = 0) ---
                                        <form asp-controller="Cart" asp-action="AddToCart" method="post" style="display:inline;">
                                            <input type="hidden" name="itemId" value="@item.ItemId" />
                                            <button type="submit" class="btn btn-success btn-sm">Add</button>
                                        </form>
                                    }
                                    else
                                    {
                                        // --- B. Quantity Selector (Visible when Q > 0) - This uses placeholder actions ---
                                        <div class="quantity-selector" data-item-id="@item.ItemId">

                                            <form asp-controller="Cart" asp-action="DecrementItem" method="post" style="display: inline;">
                                                <input type="hidden" name="itemId" value="@item.ItemId" />
                                                <button type="submit" class="btn btn-outline-secondary btn-sm quantity-btn decrement-btn">
                                                    @if (currentQuantity == 1)
                                                    {
                                                        <i class="bi bi-trash"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-dash"></i>
                                                    }
                                                </button>
                                            </form>

                                            <span class="item-quantity px-2">@currentQuantity</span>

                                            <form asp-controller="Cart" asp-action="AddToCart" method="post" style="display: inline;">
                                                <input type="hidden" name="itemId" value="@item.ItemId" />
                                                <button type="submit" class="btn btn-outline-secondary btn-sm quantity-btn increment-btn">
                                                    <i class="bi bi-plus"></i>
                                                </button>
                                            </form>

                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    @* New Tooltip Structure - Populates content on load *@
                    <div class="full-description-tooltip bg-white p-3 rounded-4 shadow-lg">
                        <img class="tooltip-img img-fluid rounded-4" alt="" style="max-height: 150px; object-fit: cover; width: 100%;" />
                        <h6 class="tooltip-name mt-2 mb-1 fw-bold"></h6>
                        <p class="tooltip-description mb-0 text-dark small"></p>
                    </div>

                </div>
            </div>
        }
    </div>
}
else
{
    <p class="text-center text-muted">No food items found in this category.</p>
}

<script>
    document.querySelectorAll('.food-item-card').forEach(card => {
        // Retrieve data attributes and populate tooltip content
        const fullDescription = card.getAttribute('data-full-desc');
        const itemName = card.getAttribute('data-item-name');
        const itemImage = card.getAttribute('data-item-image');
        const tooltip = card.querySelector('.full-description-tooltip');
        const clickableImage = card.querySelector('.card-image-clickable');

        if (tooltip) {
            tooltip.querySelector('.tooltip-img').src = itemImage || '';
            tooltip.querySelector('.tooltip-img').alt = itemName || 'Food Item';
            tooltip.querySelector('.tooltip-name').textContent = itemName || '';
            tooltip.querySelector('.tooltip-description').textContent = fullDescription || '';
        }

        // --- SINGLE, CONSOLIDATED CLICK EVENT HANDLER on the main card ---
        card.addEventListener('click', function (event) {

            // If the item is unavailable, stop all click actions (CSS handles most of this)
            if (card.classList.contains('unavailable-item')) {
                event.preventDefault();
                event.stopPropagation();
                return;
            }

            // Check if the click was on an interactive element (like the Add button or quantity controls)
            const clickedElement = event.target;
            const isControl = clickedElement.closest('button, a, form');

            if (isControl) {
                return; // Let the control element handle the click (e.g., submit the form)
            }

            // Main Logic: Toggle the tooltip
            event.preventDefault();
            event.stopPropagation();

            card.classList.toggle('tooltip-active');

            // Close other open tooltips
            document.querySelectorAll('.food-item-card.tooltip-active').forEach(otherCard => {
                if (otherCard !== card) {
                    otherCard.classList.remove('tooltip-active');
                }
            });
        });

        // Hide tooltip when clicking anywhere else on the document
        document.addEventListener('click', function (event) {
            if (card.classList.contains('tooltip-active') && !card.contains(event.target)) {
                card.classList.remove('tooltip-active');
            }
        });
    });
</script>