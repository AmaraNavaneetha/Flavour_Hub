@model List<restapp.Models.FoodItem>

<style>
    /* 1. CSS to visually mark unavailable items */
    .unavailable-item {
        opacity: 0.6; /* Dim the card visually */
        /* Blocks ALL clicks on the card itself */
        pointer-events: none;
        cursor: not-allowed; /* Show a "no entry" cursor */
    }

        /* 🛑 CRITICAL FIX: Force block on all elements inside the unavailable card */
        .unavailable-item * {
            pointer-events: none !important;
        }

    /* We only want a pointer cursor when the item is actually available */
    .food-item-card:not(.unavailable-item) {
        cursor: pointer;
    }

    /* Re-enable click for the tooltip description panel (if opened for an available item) */
    .full-description-tooltip {
        pointer-events: auto;
    }

    .unavailable-label {
        color: #dc3545;
        font-weight: bold;
        text-transform: uppercase;
        font-size: 0.9rem;
    }
</style>

<div class="mb-3">
    <a href="@Url.Action("Menu", "Home")" class="btn" style="background-color: #f0f0f0; color: #333; border: 1px solid #ccc;">
        ← Back
    </a>
</div>

@if (Model != null && Model.Count > 0)
{
    <div class="row row-cols-1 row-cols-md-3 g-4">

        @foreach (var item in Model)
        {
            // C# LOGIC: Check availability and set classes/variables
            bool isAvailable = item.IsAvailable;
            string cardClass = isAvailable ? "shadow-sm" : "unavailable-item";

            <div class="col">
                <div class="card h-100 @cardClass rounded-4 food-item-card"
                     data-full-desc="@item.ItemDescription"
                     data-item-name="@item.ItemName"
                     data-item-image="@Url.Content(item.ItemImagePath)">

                    <img src="@Url.Content(item.ItemImagePath)" class="card-img-top img-fluid rounded-top-4 card-image-clickable" alt="@item.ItemName" style="height:200px; object-fit:cover;" />

                    <div class="card-body d-flex flex-column justify-content-between">
                        <div>
                            <div class="d-flex justify-content-between align-items-center mb-2">

                                @* Veg/Non-Veg Indicator *@
                                @if (item.itemType?.ItemTypeName == "Veg")
                                {
                                    <span class="d-inline-flex align-items-center gap-2">
                                        <span class="d-inline-block border border-success rounded px-1 py-1" style="width: 20px; height: 20px; position: relative;">
                                            <span class="bg-success rounded-circle" style="width: 10px; height: 10px; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);"></span>
                                        </span>
                                        <span class="text-success fw-semibold"></span>
                                    </span>

                                }
                                else
                                {
                                    @* Non-Veg Indicator *@
                                    <span class="d-inline-flex align-items-center gap-2">
                                        <span class="d-inline-block bg-white border border-danger rounded px-1 py-1" style="width: 20px; height: 20px; position: relative; overflow: hidden;">
                                            <svg viewBox="0 0 20 20" width="20" height="20" style="position: absolute; top: 0; left: 0;">
                                                <polygon points="10,4 16,16 4,16" fill="red" />
                                            </svg>
                                        </span>
                                        <span class="text-danger fw-semibold"></span>
                                    </span>
                                }

                                @* Rating Display *@
                                @if (!string.IsNullOrWhiteSpace(item.Rating) && item.RatingCount > 0)
                                {
                                    var ratingValue = Convert.ToDouble(item.Rating);

                                    var starColor = ratingValue > 6 ? "#d4ac0d" : "#ffc107";
                                    <span class="d-inline-flex align-items-center gap-1">
                                        <i class="bi bi-star-fill" style="color:@starColor;">★</i> @item.Rating
                                        <small class="text-muted">(@item.RatingCount ratings)</small>
                                    </span>

                                }
                                else
                                {
                                    <span class="text-muted">No ratings yet</span>
                                }
                            </div>

                            <h5 class="card-title">@item.ItemName</h5>

                            @* Display availability status *@
                            @if (!isAvailable)
                            {
                                <p class="unavailable-label mb-2">Unavailable</p>
                            }

                            <p class="card-text short-description-text">
                                @(item.ItemDescription.Length > 30 ? item.ItemDescription.Substring(0, 30) + "..." : item.ItemDescription)
                            </p>

                            <p class="card-text mb-2">
                                <strong>Price:</strong><br />
                                <span class="text-muted text-decoration-line-through">₹@item.ActualPrice</span><br />
                                <span class="text-success">@item.DiscountPer% off</span>
                            </p>

                            @* Selling Price and Add Button Side by Side *@
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="fw-bold fs-5 mb-0">₹@item.SellingPrice</span>

                                @* CONDITIONAL BUTTON LOGIC *@
                                @if (isAvailable)
                                {
                                    <button class="btn btn-success btn-sm">Add</button>
                                }
                                else
                                {
                                    <button class="btn btn-danger btn-sm" disabled>Out of Stock</button>
                                }
                            </div>
                        </div>
                    </div>

                    @* New Tooltip Structure *@
                    <div class="full-description-tooltip bg-white p-3 rounded-4 shadow-lg">
                        <img class="tooltip-img img-fluid rounded-4" alt="" />
                        <h6 class="tooltip-name mt-2 mb-1"></h6>
                        <p class="tooltip-description mb-0 text-dark"></p>
                    </div>

                </div>
            </div>

        }
    </div>

}

else
{
    <p class="text-center text-muted">No food items found in this category.</p>
}

<script>
    document.querySelectorAll('.food-item-card').forEach(card => {
        // Retrieve data attributes
        const fullDescription = card.getAttribute('data-full-desc');
        const itemName = card.getAttribute('data-item-name');
        const itemImage = card.getAttribute('data-item-image');

        // Get tooltip elements
        const tooltip = card.querySelector('.full-description-tooltip');

        // Populate tooltip content
        if (tooltip) {
            tooltip.querySelector('.tooltip-img').src = itemImage || '';
            tooltip.querySelector('.tooltip-img').alt = itemName || 'Food Item';
            tooltip.querySelector('.tooltip-name').textContent = itemName || '';
            tooltip.querySelector('.tooltip-description').textContent = fullDescription || '';
        }

        // --- CLICK EVENT HANDLER on the main card ---
        // CSS 'pointer-events: none' on '.unavailable-item' will prevent this from firing when disabled.
        card.addEventListener('click', function (event) {

            // This condition is the main click-to-show-tooltip logic
            if (card.contains(event.target)) {

                event.preventDefault();
                event.stopPropagation();

                // Toggle the 'tooltip-active' class on the parent card
                card.classList.toggle('tooltip-active');

                // Close other open tooltips
                document.querySelectorAll('.food-item-card.tooltip-active').forEach(otherCard => {
                    if (otherCard !== card) {
                        otherCard.classList.remove('tooltip-active');
                    }
                });
            }
        });

        // Optional: Hide tooltip when clicking anywhere else on the document
        document.addEventListener('click', function (event) {
            if (card.classList.contains('tooltip-active') && !card.contains(event.target)) {
                card.classList.remove('tooltip-active');
            }
        });
    });
</script>